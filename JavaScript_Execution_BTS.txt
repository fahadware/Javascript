JavaScript Execution Flow
============================

This document explains how JavaScript code runs inside a browser or JavaScript engine like  V8(used in Chrome and Node.js) javascriptcore (safari).

1. Code File (Source Code)
--------------------------
You write JavaScript in files like:

    function greet() {
        console.log("Hello, World!");
    }
    greet();

2. Parsing
----------
The JS engine parses the code:
- Lexical Analysis (Tokenizing): Converts code into tokens.
- Syntactic Analysis: Uses tokens to build a Syntax Tree.
- If syntax errors exist, parsing stops here.

3. Syntax Tree (AST - Abstract Syntax Tree)
-------------------------------------------
The parser creates an AST (Abstract Syntax Tree), a structured tree representation of code:
- Each node = language construct (e.g., variable, function)
- Helps JS engine understand what to do

4. Interpreter / JIT Compiler
-----------------------------
Ignition (Interpreter):
- V8’s Ignition interpreter reads the AST
- It produces Bytecode (low-level instructions)

TurboFan (JIT Compiler):
- Frequently-used code ("hot code") is optimized and compiled into Machine Code by TurboFan.

5. Bytecode
-----------
- Intermediate code format
- Easier and faster to interpret than raw JavaScript
- Looks like simplified CPU instructions

6. Machine Code
---------------
- Native code directly understood by the CPU
- Fastest form
- Generated by the JIT compiler

7. Execution
------------
- Machine code is finally executed by the CPU
- Results like DOM updates, console logs, or network requests are triggered here


Summary Flowchart
-----------------
Your JS Code
   ↓
[Parsing]
   ↓
[Syntax Tree (AST)]
   ↓
[Ignition → Bytecode]
   ↓
[TurboFan → Machine Code]
   ↓
[Execution]


Extra: Memory Management
------------------------
- JavaScript has Automatic Garbage Collection
- JS engine removes unused variables and objects from memory


Engines that Use This Flow
--------------------------
- V8 – Chrome, Node.js
- SpiderMonkey – Firefox
- JavaScriptCore – Safari
-Bun

so ,,,
-----------
This process makes JavaScript:
- Fast (JIT optimization)
- Safe (error-checking during parsing)
- Portable (runs across different OS and browsers)
